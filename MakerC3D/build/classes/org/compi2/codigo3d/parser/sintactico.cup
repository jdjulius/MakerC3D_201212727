package org.compi2.codigo3d.parser;

import java_cup.runtime.Symbol;

//PARSER PARA EL ARCHIVO DE ESCENARIOS
parser code
{://Codigo visible

    public void syntax_error(Symbol s){
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("T.T");
        System.err.println(s);
    }

:}

action code
{://Codigo de acciones
      
:}

terminal String ID, ENTERO, DECIMAL;
terminal TokenC3D MAS, MENOS, MULT, DIV, POT, PAR_IZQ, PAR_DER;
terminal TokenC3D IGUAL,DIFERENTE,MAYOR,MENOR,MAYORIGUAL,MENORIGUAL;
terminal TokenC3D AND,OR,NOT;

nonterminal NodoC3D inicial, expresion,R,COND;
nonterminal String OP;



precedence left MAS, MENOS;
precedence left MULT, DIV; 
precedence right POT; 
precedence left IGUAL,DIFERENTE,MAYOR,MENOR,MAYORIGUAL,MENORIGUAL;
precedence left OR;
precedence left AND;
precedence left NOT;

start with inicial;

inicial     ::=  COND:con 
                    {: 
                        //ultimo valor dependiendo si trae 
                        if(con.getEtiqueta_v()!=""){
                            ControlC3D.agregarC3D("//Etiqueta(S) de verdadero: " + con.getEtiqueta_v() + "\n");
                            ControlC3D.agregarC3D("//Etiqueta(S) de falso: " + con.getEtiqueta_f());
                        }else{
                            ControlC3D.agregarC3D("//Ãšltimo valor: " + con.getCad());
                        }
                        RESULT = con;
                    :};

COND    ::=COND:izq  OR {:String c3d=izq.getEtiqueta_f() + ":" + "\n"; ControlC3D.agregarC3D(c3d); :} COND:der{: 
                        String lv =izq.getEtiqueta_v() + " , " + der.getEtiqueta_v() + " ";
                        String lf =der.getEtiqueta_f();
                        RESULT = new NodoC3D(lv,lf); 
                   :}
    |COND:izq  AND {:String c3d=izq.getEtiqueta_v() + ":" + "\n"; ControlC3D.agregarC3D(c3d); :} COND:der{: 
                        String lv = der.getEtiqueta_v();
                        String lf =izq.getEtiqueta_f() + " , " +der.getEtiqueta_f() + " ";
                        RESULT = new NodoC3D(lv,lf); 
                    :}
    |NOT COND:izq{: 
                        String lv =izq.getEtiqueta_f();
                        String lf =izq.getEtiqueta_v();
                        RESULT = new NodoC3D(lv,lf);
                    :}
    |R:r{:
                        RESULT = r;
                :}
;

R ::= expresion:izq OP:op expresion:der{: 
                        
                        String lv =ControlC3D.generaEtq();
                        String lf =ControlC3D.generaEtq();
                        String c3d="if (" + izq.getCad() + op + der.getCad() + ") goto" + lv + " \n";
                        c3d+="goto" + lf + " \n";
                        
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(lv,lf); 
                    :}
     
    |expresion:exp{:
                        RESULT = exp;
                :}
;

OP ::=IGUAL
                    {: RESULT = " == "; :}
    |MAYOR
                   {: RESULT = " > "; :}
 
    |MENOR
                   {: RESULT = " < "; :}
 
    |DIFERENTE                  
                    {: RESULT = " != "; :}
 
    |MAYORIGUAL
                    {: RESULT = " >= " ;:}
 
    |MENORIGUAL
                   {: RESULT = " <= "; :}
 
;

expresion   ::= expresion:izq MAS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " + " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq MENOS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " - " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq MULT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " * " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq DIV expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " / " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq POT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " ^ " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   MENOS expresion:exp 
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = - " + exp.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   PAR_IZQ expresion:exp PAR_DER   
                    {: RESULT = exp; :}
            |   ID:id           
                    {: RESULT = new NodoC3D(id); :}
            |   ENTERO:entero   
                    {: RESULT = new NodoC3D(entero); :}
            |   DECIMAL:decimal 
                    {: RESULT = new NodoC3D(decimal); :}
            ;